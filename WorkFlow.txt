С самого начала надо понять что мы в принципе делаем? Т.е. нужен тест сьют  (не помниш ?читай --> https://docs.google.com/document/d/1miYcZ1oPyzOzUuvJCsoT-mk4Xe4pmFyuVeJ12gthO4A/edit)
а внём тест кейсы.
Начинаем собирать проект с Тест сьюта "(TS_001) Register Functionality" и тест кейса TC_RF_001
смотри документ --> OpenCart-TestCases.xlsx <-- должен лежать в корне проекта.
Тест сьют и тест сценарий походу одно и тоже.

В общем по тест кйсу, там надо зарегистрироватся (используются 2 web page) c валидными данными.
Понеслась:
1) Создать Page Object Classes, классы в которых описываем web элементы + методы которые будем делать на этой
странице. Для того чтобы не создавать драйвер в каждой странице создаём super BasePage класс у которого будет только
сущность драйвера, а все Page Object Clas-ы будут наследоватся от него, тем самым иметь доступ к драйверу.
2) создаём BaseClass - он утилита для всех Тестовых классов в нём методы которые используются тестами.
3) сам тестовый класс TC_001_AccountRegistrationTest там лежит тест,тест этот просто вызывает методы из Page
Object Classes.
--------------------------------------------------------------------------------------------------------------
Теперь надо добавить логи, читай --> https://docs.google.com/document/d/1CqXDJj6lBdKpzxV2erGaRhOf4KwTBSuvOjf3en68dxc/edit
т.е. нужно создать конфигурационный log4j2.xml файл и поместить в src.test.resources + dependency. Но этого мало
надо както интегрировать логи в тест класс. Для этого надо изменить BaseClass так как он у нас несёт методы
которые используют все тест кейсы. Нужно имплементировать Logger в нём и все классы тестовые смогут использовать логи.
Для этого есть класс Logger определённый класс из сторонней библиотеки (внимательно с импортами, нужен log4j )
отвечающий за интеграцию логав.
logger = LogManager.getLogger(this.getClass()); <-- иницализация происходит с помощью LogManager (внимательно с импортами, нужен log4j )
this потому что в каждом тест классе мы extends BaseClass. Соответственно logeer будет доступным везде.
Теперь в самом тесте, шаги которого нам нужно про логировать, нужно вызвать метод у logger
logger.info("та инфа которую хочеш чтобы записалась в логи"
Когда пройдёт выполнение все логи будут отражены/записаны в файле, расположение и название которого было указано в
конфигурационном файле (log4j2.xml)
Пример расположение логов в тесте:

logger.info("Starting verify_account_registration test in TC_001_AccountRegistrationTest class"); <-----!!!!!
HomePage hp=new HomePage(driver);
hp.clickMyAccount();
logger.info("Clicked my account button");                                                         <-----!!!!!
hp.clickRegister();
logger.info("Clicked registration button");                                                       <-----!!!!!

каждый важныйэтап в тесте отмечаем логам, потом когда просматриваеш историю, понятно, что за чем выполнялось.
Если выполнить framework несколько раз то логи будут идти один за одним, т.е. предыдущее выполнение не будет
перезаписано текущим выполнением, получается некая история к которой можно обратится.
-------------------------------------------------------------------------------------------------------------------------------
Добовляю проперти файл src/test/resources/config.properties в нём будут хранится переменные которые динамически не изменяются,
типа url...  Динамически изменяемые значения которые используются в Data Driven Tests - это другой концепт (подход) их надо
хранить в Excel наверно.
Целью же config.properties файла является хранение захардкодженных значений которые статичны в
переменных и использование этих переменных в коде когда надо во многих test case - ах. Сначала надо создать .properties файл,
Синтаксис и пример смотри в src/test/resources/config.properties. Чтобы загрузить пропертис переменные,
нам нужно создать экземпляр класса Properties,будем делать это в BaseClass-e, таким образом все тест классы смогут спомощью
этого обьекта получить доступ к переменным в сonfig.properties. Смотри setUp метод //loading properties file в BaseClass-e.
Чтобы использовать обьект Properties, вызови метод properties.gerProperties("название_переменной")
------------------------------------------------------------------------------------------------------------------------------
                            Pawan Kumar, automation framework -Session_4.
Добавил ещё один тест кейс TC_002_LoginTest. Это логин тест (ввести логин, пасворд, нажать логин)
Тест проводится с валидными данными
Технически добавил:
- 2 Page Object Class-а: LoginPage, MyAccountPage.
- добавил web элемент в Home page + 1 method() к нему.
- Добавил сам тест кейс TC_002_LoginTest
- Добавил конфигурационный файл .xml
- файл config.properties (из него будем читать переменные для ввода(логин,пароль,url...)
Добавили немного кросбраузерности и параметризации (параметров из xml) теперь запустить тест можно только с помощью .xml файла
так как метод setUp() в Base class-e должен получить стрингу (название браузера) и инициализировать (в зависимости от
передоваемой стриноги из xml) тип браузера, для выполнения тестов. Хочеш хроме, хочеш fireFox. Это с помощью параметров летит
из зxml.

Теперь из этого теста зделаем DDT, цель протестировать тест с валидными данными и не валидными. Хранить эти данные будем в
папке testData, имя файла Opencart_LoginData.xlsx (Excel file), теперь нужен utility класс который бы помогал доставать данные
с Excel. ExcelUtility. Также нам понадобится dataProvider класс который будет читать данные из Excel c помощью ExcelUtility и
передовать их в тест.
Тест раньше как ты помниш) брал данные из проперти файла но там были только валидные данные, теперь берём и валидные и нет
из Excel-я. Весь метод в новом тест кейсе будет такой же логики и примерно такого же исполнения. Но есть одна логическая особеность!
Так как теперь тест будет выполнятся и с валидными и с не валидными данными надо этот момент отработать if-ами в самом тест
классе. Также определится когда тест будет щитатся пройденным а когда зафэйлиным, ведь теперь когда мы подаём не валидные данные
и тест прошол то это плохо, в нашем контексте это будет щитатся что он зафэйлился, но если мы передаём не валидные данные и тест
упал то всё хорошо, для нашей логики это значит, что тест прошол
-------------------------------------------------------------------------------------------------------------------------------
                                       Pawan Kumar, automation framework -Session_5.
Разбить тесты по группам, задействованны только 1 и 2 тесты, для этого в тест кейсах в методах помеченных @Test аннотацией
в параметрах добавить атрибут groups={"name_of_group"}
Важно также добавить этот же атрибут в сетап метод помеченный @BeforeClass, который выполняется до всех тестов, иначе будет
налл поинтер ексепшн, так как в сетап методе у нас вся инициализация (драйвер, логер...), а данный атрибут включает только те
методы которые добавили его в аннотацию, выглядит это так:
@BeforeClass(groups = {"regression"})
в тирДоун, метод который закрывает ресурсы тоже надо в аннотацию добавить атрибут групс (с соответствующей названием группы),
иначе ничяго не закроется, метод попросту не будет включён в рантайм.
И добовляя этот атрибут к методам помеченным аннотациями @BeforeClass и @AfterClass надо добовлять все существующие группы,
тогда какую группу бы не вызвал конфигурационный файл она выполнится.
Добавил forGroup.xml файл в нём указал оба класса (которые у меня представляют тест кейсы) в зависимости от указанной группы
именно из них и будет выполнена группа, т.е. те методы из этих классов которые входят в указанную группу. Если класса нет в
конфигурационном файле ( а методы у него входят в указанную группу) то методы, несмотря на то что они входят в группу,
НЕ выполнятся.

Добавить репорт в пhоект, для этого
- добавить класс который реализует ITestListener интерфейс, ExtentReportManager, разобрал его здесь
https://docs.google.com/document/d/1uO7VUqi88VN3ftn-R4G-qRQE8v63SNuJd_vReoni5PI/edit
-Добавить метод captureScreen() в BaseClass
Переделал этот метод так как его понимаю я, за основу взял --> https://docs.google.com/document/d/1Sfm-cMH0y9OuParyrCrl4SUFunalaT7x2cIokHVCgeQ/edit
-Добавить листенер в иксмл
 <listeners>
        <listener class-name="utilities.ExtentReportManager"></listener>
</listeners>
Репорт сам открывается по завершению теста, такое поведение определено в onFinish методе в листенере ExtentReportManager
Зделать драйвер в бэйсклассе статическим, иначе получим вот такую ошибку. Почему не знаю.
<--NullPointerException: Cannot invoke "org.openqa.selenium.TakesScreenshot.getScreenshotAs(org.openqa.selenium.OutputType)"
 because "takesScreenshot" is null-->

Теперь отработаем сценарий например у меня есть 100 тестов из них 10 упало и теперь мне надо прогнать именно эти 10 упавших.
Если выполнить опять тот же xml файл то такого поведения не добьёшся, выполнится весь файл. А я не хочу тратить ресурсы
на все 100, мне нужны только упавшие 10 тестов.
В папке test-output, она генерится при рантайме, и представляет собой репорт по умолчанию от TestNG.
Небыло папки test-output, решение тут https://docs.google.com/document/d/1PBMZCrNBs99xnwZIAicl-Sbcgyda1Vyl2FBeiu5YQAQ/edit
В ней есть документ testng-failed.xml открой его и там можно увидеть зафэйлиные тесты, вернее классы (ну и методы в них)
НО только с последнего рантайма. И что ооочень классно этот файл тоже можно выполнить! Мы проранили 100 тест-кейсов
10 тесткейсов из них упало, мы пофиксили в них упавшие методы-тесты, и можем проранить вот этот файл testng-failed.xml
вместо того чтобы выполнять весь изначальный наш xml.
-----------------------------------------------------------------------------------------------------------------------------
                                       Pawan Kumar, automation framework -Session_6. Настройка грида
!Внимание! Если ты зделал сетап грида как standalone, твоя локальная машина это хаб и нод одновременно,поэтому при запуске
тестов будет видна работа и хаба, т.е. сервера (http://localhost:4444/ui/#) и твоего локального браузера на твоей локальной
машине, так как твоя локальная машина это нод которому хаб распределяет работу (здесь выполнение тестов).

На этом этапе добовляем грид в проект, для этого
1)- Скачать и запустить грид сервер, читай -> https://docs.google.com/document/d/1JU13carYupDrUqUUqcg97PbwUhc6L8IuR7LaPfEPeW8/edit
2)- Добавить в config.properties файл ещо одну переменную execution_environment, она будет индикатором выполнения тестов
удалённо или локально, значения для неё = local, remote.
3)- Теперь надо изменить метод setUp в BaseClass так как мы сетили драйвер, а для использования грида нам нужен Remote
WebDriver, смотри логику в ***//launching driver if execution_environment =remote*** в setUp() методе Base class-a
также тут https://docs.google.com/document/d/1JU13carYupDrUqUUqcg97PbwUhc6L8IuR7LaPfEPeW8/edit
И ещё, внимательно с параметрами из xml, метод который их принимает (в моём случае setUp()) обязательно должен иметь
аннотацию @Parameters c названиями параметров которые он принимает и нзвания параметров перечисленных в этой аннотации должны
быть такими же как в xml. В xml каждое название параметра (т.е. сам параметр) имеет значение, это значение мы и принимаем в
методе (по названию) с помощью аннотации и если название метода не коректное то метод не получит значения.
-------------------------------------------------------------------------------------------------------------------------------
                                       47. Automation Framework -Session7

На этом шаге будем ранить наш проект с помощью пом файла. Для этого надо добавить плагины, смотри тут
https://docs.google.com/document/d/1MkFw5jr5JWpporbKyTY5cXXYgxVYgRCpdn2157hQn0U/edit
затем в плагин можно добавить тег <cоnfigyration> в котором описывается какие конфигурационные файлы xml будут использоватся
Открыв терминал можно проранить пом файл с помощью мавена, это же мавен проект, команда --> mvn clean test

Далее надо както ранить проект вне среды разработки, для этого надо установить мавен на ос.
Переходим в расположение проекта открыть терминал и mvn clean test

А можно зделать бат файл в котором будут лежать 2 команды
1)-перейти в расположение проекта
2)-выполнить mvn clean test
Сделал это вот тут -> C:\for_experements\pavan_framework
--------------------------------------------------------------------------------------------------------------------------------
                                     49. Continuous Integration Part -2
На этом шаге подключаем Дженкинс, я до конца так и не понимаю для чего он нужен, но
1)Скачать дженкинс и установить, смотри тут - https://docs.google.com/document/d/1KzBRxU6Wtrw2lKgh6ZXVub1M9JHiHqrQshuvyEE4tas/edit?usp=sharing
2) не забудь установить значение переменной в проперти файле на local, хотя если грид с нодами работает то может и так  прокатит
3)ну и в гитхаб всё надо залить, а дженкинс уже будет пулить к себе локально и потом используя инструменты указанные при конфигурации
(jdk,git...) будет ранить помник
А с другой стороны нахера всё это надо если я сам могу с бат файла всё прогнать. Или даже в рукопашную в консоли.






